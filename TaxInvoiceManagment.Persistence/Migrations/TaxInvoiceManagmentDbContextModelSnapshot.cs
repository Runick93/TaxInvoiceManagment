// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxInvoiceManagment.Persistence;

#nullable disable

namespace TaxInvoiceManagment.Persistence.Migrations
{
    [DbContext(typeof(TaxInvoiceManagmentDbContext))]
    partial class TaxInvoiceManagmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.12");

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate2")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("TEXT");

                    b.Property<string>("PdfPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxOrServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaxOrServiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.TaxOrService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("TaxesOrServices");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.Asset", b =>
                {
                    b.HasOne("TaxInvoiceManagment.Domain.Models.User", "User")
                        .WithMany("Assets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.Invoice", b =>
                {
                    b.HasOne("TaxInvoiceManagment.Domain.Models.TaxOrService", "TaxOrService")
                        .WithMany("Invoices")
                        .HasForeignKey("TaxOrServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxOrService");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.TaxOrService", b =>
                {
                    b.HasOne("TaxInvoiceManagment.Domain.Models.Asset", "Asset")
                        .WithMany("TaxesOrServices")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.Asset", b =>
                {
                    b.Navigation("TaxesOrServices");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.TaxOrService", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("TaxInvoiceManagment.Domain.Models.User", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
